/****************************************************************************
 * ProtocolLibrary.idl : IDL source for ProtocolLibrary
 * Copyright 2013 Salsita Software (http://www.salsitasoft.com).
 * Author: Arne Seib <arne@salsitasoft.com>
 ****************************************************************************/

import "oaidl.idl";
import "ocidl.idl";
import "exdisp.idl";
import "dispex.idl";

//--------------------------------------------------------------------------
[
	uuid(E8A099E5-DEC2-45F9-BDE3-3E82629AEF6B),
	version(1.0),
]
library protocolpatchLib
{
	importlib("stdole2.tlb");

  // IHeaders implements a kind-of JS array for easy iteration
  // from JavaScript. Besides some methods it has properties
  // 0 - N for its values.
  // N is DISPID_FIRST_HEADER_NATIVE - 1, so all methods (like
  // forEach() etc) have DISPIDs >= DISPID_FIRST_HEADER_NATIVE.
  #define DISPID_FIRST_HEADER_NATIVE  100000
  cpp_quote("enum { DISPID_FIRST_HEADER_NATIVE = 100000 };")

  //--------------------------------------------------------------------------
  // Scheme: The probably most important enum.
  // It is - among others - used as a template argument to many
  // of the classes here to e.g. generate singletons for each
  // scheme we handle.
  typedef enum Scheme {
    SCHEME_HTTP,
    SCHEME_HTTP_S,
    SCHEME_COUNT
  } Scheme;

  //--------------------------------------------------------------------------
  // Interface IKVPair: A tuple with "key" and "val". Used for headers.
  [
	  object,
	  uuid(E20A04CF-FEB7-414C-A455-90985D1A7E32),
	  dual,
	  nonextensible,
	  pointer_default(unique)
  ]
  interface IKVPair : IDispatch
  {
    [propget, id(1), helpstring(
      "Getter 'key'."
    )]
    HRESULT key([out, retval] BSTR * aRetVal);
    [propput, id(1), helpstring(
      "Setter 'key'."
    )]
    HRESULT key([in] BSTR aVal);

    [propget, id(2), helpstring(
      "Getter 'val'."
    )]
    HRESULT val([out, retval] BSTR * aRetVal);
    [propput, id(2), helpstring(
      "Setter 'val'."
    )]
    HRESULT val([in] BSTR aVal);

    [id(3), helpstring(
      "Method 'set'. Set both key and value."
    )]
    HRESULT set([in] BSTR aKey, [in] BSTR aVal);

    [id(4), helpstring(
      "Method 'get'. Return both key and value."
    )]
    HRESULT get([out] BSTR * aKeyOut, [out] BSTR * aValOut);
  };

  //--------------------------------------------------------------------------
  // Interface IHeaders. An array-like object holding
  // an array of key/value tuples. Used for storing headers.
  [
	  object,
	  uuid(E05C2293-69F9-4C3E-AE5F-15B4CE78E42C),
	  dual,
	  nonextensible,
	  pointer_default(unique)
  ]
  interface IHeaders : IDispatch
  {
    [propget, id(DISPID_FIRST_HEADER_NATIVE + 1), helpstring(
      "Getter 'length'."
    )]
    HRESULT length([out, retval] ULONG * aRetVal);

    [id(DISPID_FIRST_HEADER_NATIVE + 2), helpstring(
      "Method 'forEach'. Enumerates all entries with a callback."
    )]
    HRESULT forEach([in] IDispatch * aCallback, [in, optional] VARIANT aThis);

    [id(DISPID_FIRST_HEADER_NATIVE + 3), helpstring(
      "Method 'remove'. Remove an entry."
    )]
    HRESULT remove([in] ULONG aIndex);

    [id(DISPID_FIRST_HEADER_NATIVE + 4), helpstring(
      "Method 'push'. Add entry to the end of the array."
    )]
    HRESULT push([in] BSTR aKey, [in] BSTR aVal);

    [id(DISPID_FIRST_HEADER_NATIVE + 5), helpstring(
      "Method 'clear'. Remove all entries."
    )]
    HRESULT clear();

    [id(DISPID_FIRST_HEADER_NATIVE + 6), helpstring(
      "Method 'getKV'. Get both key and value for a certain index."
    )]
    HRESULT getKV([in] ULONG aIndex, [out] BSTR * aRetKey, [out] BSTR * aRetVal);

    [id(DISPID_FIRST_HEADER_NATIVE + 7), helpstring(
      "Method 'get'. Return an KVPair object for a given index."
    )]
    HRESULT get([in] ULONG aIndex, [out, retval] IKVPair ** aRetVal);
  };

  //--------------------------------------------------------------------------
  // Interface IResponse. Object holding a response for a request:
  // result code and headers.
  [
	  object,
	  uuid(64FF248B-5918-4DB2-B2F3-81AC5D10D990),
	  dual,
	  nonextensible,
	  pointer_default(unique)
  ]
  interface IResponse : IDispatch
  {
    [propget, id(1), helpstring(
      "Getter 'result'. The HTTP result code."
    )]
    HRESULT result([out, retval] ULONG * aRetVal);

    [propget, id(2), helpstring(
      "Getter 'headers'. The headers for this response."
    )]
    HRESULT headers([out, retval] IHeaders ** aRetVal);

  };

  //--------------------------------------------------------------------------
  // Interface IRequest. Object holding a request including response.
  [
	  object,
	  uuid(FBB83EAB-1913-40DC-B62A-83C308CE05FF),
	  dual,
	  nonextensible,
	  pointer_default(unique)
  ]
  interface IRequest : IDispatch
  {
    [propget, id(1), helpstring(
      "Getter 'requestId'. The id of this request."
    )]
    HRESULT requestId([out, retval] LONG * aRetVal);

    [propget, id(2), helpstring(
      "Getter 'currentBrowser'. The browser for this request."
    )]
    HRESULT currentBrowser([out, retval] IWebBrowser2 ** aRetVal);

    [propget, id(4), helpstring(
      "Getter 'headers'. The headers for this request."
    )]
    HRESULT headers([out, retval] IHeaders ** aRetVal);

    [propget, id(5), helpstring(
      "Getter 'uri'. The current URI as a string."
    )]
    HRESULT uri([out, retval] BSTR * aRetVal);

    [propget, id(6), helpstring(
      "Getter 'verb'. The current request method."
    )]
    HRESULT verb([out, retval] BSTR * aRetVal);

    [propget, id(7), helpstring(
      "Getter 'response'. The response of the current request."
    )]
    HRESULT response([out, retval] IResponse ** aRetVal);

    [propget, id(8), helpstring(
      "Getter 'requestType'. Type of the request as defined in chrome.webRequest."
    )]
    HRESULT requestType([out, retval] BSTR * aRetVal);

    [id(100), helpstring(
      "Method 'isDocumentRequest'. Returns S_FALSE if this request is for a resource other than a document."
    )]
    HRESULT isDocumentRequest();

    [id(101), helpstring(
      "Method 'isSubFrame'. Returns S_FALSE if this request is for the root frame."
    )]
    HRESULT isSubFrame();

    [id(102), helpstring(
      "Method 'redirect'. Redirects a request."
    )]
    HRESULT redirect([in] BSTR aNewUri);

    [id(103), helpstring(
      "Method 'cancel'. Cancels a request."
    )]
    HRESULT cancel();

    [id(200), restricted, helpstring(
      "Method 'getIUri'. Return the current URI as a IUri."
    )]
    HRESULT getIUri([out, retval] IUri ** aRetVal);

    [id(201), restricted, helpstring(
      "Method 'getRedirectUri'. Return the redirect URI that was set via 'redirect'."
    )]
    HRESULT getRedirectUri([out, retval] IUri ** aRetVal);

    [id(202), restricted, helpstring(
      "Method 'isCanceled'. Return TRUE if the request was canceled."
    )]
    HRESULT isCanceled();
  };

  //--------------------------------------------------------------------------
  // Interface IWebRequestEvents. Events according to chrome.webRequest.
  // See http://developer.chrome.com/extensions/webRequest.html#events
  // This is the interface clients have to implement to receive
  // notifications about network events on the watched protocols.
  [
	  object,
	  uuid(BB558246-5A8B-4680-8FCA-690D95A93DC5),
    oleautomation,
	  pointer_default(unique)
  ]
  interface IWebRequestEvents : IUnknown
  {
    HRESULT onBeforeRequest([in] IRequest * aRequest);
    HRESULT onBeforeSendHeaders([in] IRequest * aRequest);
    HRESULT onBeforeRedirect([in] IRequest * aRequest);
    HRESULT onHeadersReceived([in] IRequest * aRequest);
    HRESULT onInteractive([in] IRequest * aRequest);
    HRESULT onCompleted([in] IRequest * aRequest);
  };

  //--------------------------------------------------------------------------
  // Interface IProtPatchApplication. The main object in the protocol library.
  // Use it to:
  // - patch / unpatch a protocol
  // - register / unregister a protocol handler for a certain scheme
  // - register / unregister listners to network events. They must implement
  //   IWebRequestEvents.
  [
	  object,
	  uuid(6FCABF5C-26B1-4C01-A5CA-E8D0D9BA1A72),
	  pointer_default(unique)
  ]
  interface IProtPatchApplication : IUnknown
  {
    HRESULT patchProtokol([in] Scheme aScheme, [in] BOOL aUseVTablePatching);
    HRESULT unpatchProtokol([in] Scheme aScheme);
    HRESULT enableProtokol([in] Scheme aScheme, [in] BOOL aEnable);

    //-------------------------------------------------------------------------
    // registers a temporary file protocol of the form
    // lpszScheme://lpszHost/
    // where lpszFolder points to the root folder of this "server"
    HRESULT RegisterTemporaryFolderHandler(
      [in] LPCOLESTR lpszScheme,
      [in] LPCOLESTR lpszHost,
      [in] LPCOLESTR lpszFolder);

    //-------------------------------------------------------------------------
    // registers a temporary resource protocol of the form
    // lpszScheme://lpszHost/
    // where lpszResourceFileName points to the file (DLL or exe) holding the
    // resources
    HRESULT RegisterTemporaryResourceHandlerFile(
      [in] LPCOLESTR lpszScheme,
      [in] LPCOLESTR lpszHost,
      [in] LPCOLESTR lpszResourceFileName);

    //-------------------------------------------------------------------------
    // registers a temporary resource protocol of the form
    // lpszScheme://lpszHost/
    // where hInstResources is a module handle of the file (DLL or exe) holding
    // the resources
    HRESULT RegisterTemporaryResourceHandlerInstance(
      [in] LPCOLESTR   lpszScheme,
      [in] LPCOLESTR   lpszHost,
      [in] HINSTANCE hInstResources);

    //-------------------------------------------------------------------------
    // registers a temporary resource protocol of the form
    // lpszScheme://lpszHost/
    // where hInstResources is a module handle of the file (DLL or exe) holding
    // the resources
    HRESULT RegisterTemporaryCustomHandler(
      [in] LPCOLESTR   lpszScheme,
      [in] LPCOLESTR   lpszHost,
      [in] VARIANT     aResourceId,
      [in] IClassFactory * aClassFactory);

    //-------------------------------------------------------------------------
    // unregisters a file protocol previously registered with
    // one of the RegisterTemporaryXXXHandler methods
    HRESULT UnregisterTemporaryFolderHandler(
      [in] LPCOLESTR lpszScheme,
      [in] LPCOLESTR lpszHost);

    //-------------------------------------------------------------------------
    // unregisters a resource protocol previously registered with
    // one of the RegisterTemporaryXXXHandler methods
    HRESULT UnregisterTemporaryResourceHandler(
      [in] LPCOLESTR lpszScheme,
      [in] LPCOLESTR lpszHost);

    //-------------------------------------------------------------------------
    // unregisters a resource protocol previously registered with
    // one of the RegisterTemporaryXXXHandler methods
    HRESULT UnregisterTemporaryCustomHandler(
      [in] LPCOLESTR lpszScheme,
      [in] LPCOLESTR lpszHost);

    //-------------------------------------------------------------------------
    // adds a URL where the content resides in memory.
    HRESULT AddResource(
      [in] LPCOLESTR lpszURL,
      [in] const void * lpData,
      [in] DWORD dwLength,
      [in] LPCOLESTR lpszMimeType);

    //-------------------------------------------------------------------------
    // Watch network events on a certain webbrowser control. Expects all
    // webbrowser navigation events of this browser to happen on the same thread
    // watchBrowser(..) is called.
    HRESULT watchBrowser([in] IWebBrowser2* aWebBrowser, [in] IWebRequestEvents * aEvents);

    //-------------------------------------------------------------------------
    // Watch network events globally.
    HRESULT watchAll([in] IWebRequestEvents * aEvents);

    //-------------------------------------------------------------------------
    // Remove a listener previously added with watchBrowser(..)
    HRESULT unwatchBrowser([in] IWebBrowser2* aWebBrowser, [in] IWebRequestEvents * aEvents);

    //-------------------------------------------------------------------------
    // Remove a listener previously added with watchAll(..)
    HRESULT unwatchAll([in] IWebRequestEvents * aEvents);

  };

  //--------------------------------------------------------------------------
  // Interfaces used only internally
  //--------------------------------------------------------------------------

  //--------------------------------------------------------------------------
  // Interface IFrameRecord. Holds request data about a certain HTML frame.
  [
	  object,
	  uuid(C1DBC8E5-E10E-4FB1-86BB-0C4B2B93ACB6),
	  pointer_default(unique)
  ]
  interface IFrameRecord : IUnknown
  {
    HRESULT cleanup();
    HRESULT beforeNavigate([in] LPCWSTR aUrl, [in] IWebBrowser2 * aBrowser);
    HRESULT setUri([in] LPCWSTR aNewUri);
    HRESULT getBrowser([out, retval] IWebBrowser2 ** aRetVal);
    HRESULT getUri([out, retval] IUri ** aRetVal);
    HRESULT getSink([out, retval] IWebRequestEvents ** aRetVal);
    HRESULT isTopLevel();
    HRESULT isEqualUri([in] IUri * aUri);
  };

  //--------------------------------------------------------------------------
  // Interface IThreadRecord. Holds data about the browser and the listeners
  // on a certain thread.
  [
	  object,
	  uuid(633EAB4E-979B-4BF1-8525-4E7720EBCF4C),
	  pointer_default(unique)
  ]
  interface IThreadRecord : IUnknown
  {
    HRESULT cleanup();
    HRESULT getToplevel([out, retval] IFrameRecord ** aRetVal);
    HRESULT getCurrent([out, retval] IFrameRecord ** aRetVal);
    ULONG getThreadId();
    HRESULT getForUri([in] IUri * aUri, [out, retval] IFrameRecord ** aRetVal);
    HRESULT watchBrowser([in] IWebBrowser2 * aBrowser, [in] IWebRequestEvents * aEvents);
    HRESULT unwatchBrowser([in] IWebBrowser2 * aBrowser, [in] IWebRequestEvents * aEvents);
    HRESULT watchAll([in] IWebRequestEvents * aEvents);
    HRESULT unwatchAll([in] IWebRequestEvents * aEvents);
  };

  //--------------------------------------------------------------------------
  // Objects
  //--------------------------------------------------------------------------

  //--------------------------------------------------------------------------
  // ProtPatchApplication object : implements IProtPatchApplication
  [
		uuid(0FF4FEF4-E052-4C30-A8B2-EE7FBECC908F)		
	]
	coclass ProtPatchApplication
	{
		[default] interface IProtPatchApplication;
	};

  //--------------------------------------------------------------------------
  // Request object : implements IRequest
  [
		uuid(D6256E0E-4F08-4F25-B93D-F0044044829D)		
	]
	coclass Request
	{
		[default] interface IRequest;
	};

  //--------------------------------------------------------------------------
  // Response object : implements IResponse
  [
		uuid(EC150E8F-84A9-4762-BFFF-7BB49C342565)		
	]
	coclass Response
	{
		[default] interface IResponse;
	};
};

